<div class="wdghtml" taskKey="com.javarush.task.task24.task2413.big10">
<h3>Арканоид(10)</h3>
<p>Что мы будем делать с <span class="text-corporate"><strong>Canvas</strong></span>?<br />
Мы будем рисовать на нем (<em>в его матрице</em>).<br />
Поэтому нам понадобятся два метода<br />
<mark>void setPoint(double <strong>x</strong>, double <strong>y</strong>, char <strong>c</strong>)</mark><br />
<mark>void drawMatrix(double <strong>x</strong>, double <strong>y</strong>, int[][] <strong>matrix</strong>, char <strong>c</strong>)</mark></p>
<p>Первый метод &#8212; <mark>setPoint</mark> будет &#171;<strong><em>ставить точку в координатах</em></strong> <mark class="user">x</mark><strong>,</strong><mark class="user">y</mark><strong><em> цветом </em></strong><mark class="user">c</mark>&#171;.</p>
<p><strong>В методе надо:</strong><br />
а) округлить <mark class="user">x</mark> и <mark class="user">y</mark> до целых чисел<br />
б) занести в <mark class="user">matrix[y][x]</mark> значение с<br />
в) ничего не делать, если <mark class="user">x</mark> &lt; <span class="text-user"><strong>0</strong></span> или <mark class="user">y</mark> &lt; <strong><span class="text-user">0</span></strong> или <mark class="user">y</mark> &gt; <strong><span class="text-user">matrix.length</span></strong> или <mark class="user">x</mark> &gt; <strong><span class="text-user">matrix[0].length</span></strong></p>
<p>Второй метод &#8212; <mark>drawMatrix</mark> копирует переданную ему картинку (<em><strong>матрицу</strong></em>) в матрицу <span class="text-corporate"><strong>Canvas</strong></span>.<br />
И не просто копирует, а начиная с координат <mark class="user">x</mark>, <mark class="user">y</mark></p>
<p><strong>В методе надо:</strong><br />
а) с помощью двух вложенных циклов пройтись по всем ячейкам переданной картинки<br />
б) если значение ячейки элемента <strong>[value][j]</strong> полученной матрицы не равно<span class="text-user"><strong> 0</strong></span>, то покрасить в матрице объекта <span class="text-corporate"><strong>Canvas</strong></span> точку <strong>(</strong><mark class="user">x</mark><strong>+j, </strong><mark class="user">y</mark><strong>+value)</strong> в цвет <mark class="user">c</mark>:<br />
<span class="text-neon">setPoint(x+j, y+value, c)</span></p>

<hr>
<h3>Арканоид(9)</h3>
<p>Теперь займемся классом <span class="text-corporate"><strong>Canvas</strong></span>.<br />
Он у нас будет содержать матрицу (<em><strong>двумерный массив</strong></em>), куда мы будем &#171;<em><strong>рисовать</strong></em>&#171;.<br />
У матрицы есть ширина и высота.<br />
А еще будем в ней хранить не <strong>числа</strong> (<span class="text-corporate">int</span>), а <strong>символы</strong> (<span class="text-corporate">char</span>).</p>
<p><strong>Надо:</strong><br />
а) Добавить в класс два приватных поля <mark class="user">width</mark> и <mark class="user">height</mark>.<br />
б) Добавить в класс приватное поле <mark class="user">matrix</mark> (<span class="text-corporate">char[][]</span>).<br />
в) Добавить конструктор с двумя параметрами типа <span class="text-corporate">int</span> (<mark class="user">width</mark> и <mark class="user">height</mark>), поле <mark class="user">matrix</mark> должно быть инициализировано пустым массивом размерностью <strong>[</strong><mark class="user">height</mark><strong>+2][</strong><mark class="user">width</mark><strong>+2]</strong>.<br />
г) Добавить геттеры и сеттеры для всех приватных полей класса.</p>

<hr>
<h3>Арканоид(8)</h3>
<p>Но и это еще не все.<br />
Классу <strong><span class="text-corporate">BaseObject</span></strong> нужны еще методы.<br />
Пока это будут пустые методы <mark>draw(Canvas canvas)</mark> и <mark>move()</mark>.<br />
Классы-наследники должны будут переопределить их у себя и реализовать необходимую функциональность (<em>пока можешь оставить их пустыми, просто чтобы код компилировался</em>).<br />
Объяви эти методы, но сделай их абстрактными.<br />
Также сделай абстрактным сам класс <strong><span class="text-corporate">BaseObject</span></strong>.</p>
<p>А еще нам нужно будет определять попал шарик в кирпич или в подставку.<br />
<strong>Это будем делать так:</strong><br />
В этом же классе, создадим специальный метод: <mark>boolean isIntersec(BaseObject <strong>o</strong>)</mark><br />
Он будет определять &#8212; &#171;<em><strong>пересеклись</strong></em>&#187; объекты или нет. Если пересеклись &#8212; возвращать <span class="text-neon"><strong>true</strong></span>, если нет &#8212; <span class="text-neon"><strong>false</strong></span>.</p>
<p>Т.к. объекты мы условно считаем кругами, то предлагаю такую формулу взаимодействия<br />
Если центр круга одного объекта попал в круг другого, то будем считать, что они столкнулись.</p>
<p><strong>Или еще проще:</strong><br />
<span class="text-neon">дистанция_между_объектами &lt;= max (радиус_первого_объекта, радиус_второго_объекта)</span></p>

<hr>
<h3>Арканоид(7)</h3>
<p>Теперь перейдем к классу <strong><span class="text-corporate">BaseObject</span></strong>.<br />
Я хочу сделать несколько предложений.</p>
<p><strong>Во-первых</strong> для простоты считать все объекты у нас будут круглыми.<br />
Нет, отрисовывать их мы будем фигурными, как и раньше.<br />
А вот при расчетах из взаимодействия исходить из того, что они круглые.<br />
Так &#8212; гораздо проще.</p>
<p><strong>Во-вторых</strong>. Пусть координаты объектов и радиус будут вещественными числами.<br />
Это придаст плавность движениям и точность всем вычислениям.<br />
А при отрисовке мы будем их округлять.</p>
<p><strong>Итак:</strong><br />
а) Добавь в класс <span class="text-corporate"><strong>BaseObject</strong></span> приватные поля <mark class="user">x</mark> (<span class="text-corporate">double</span>), <mark class="user">y</mark> (double), <mark class="user">radius</mark> (<span class="text-corporate">double</span>).<br />
б) Добавь <strong>геттеры</strong> и <strong>сеттеры</strong>.<br />
в) Добавь конструктор <mark>BaseObject(double <strong>x</strong>, double <strong>y</strong>, double <strong>radius</strong>)</mark>.<br />
г) Пройдись по все <strong>классам-наследникам</strong> и поправь у них конструкторы.</p>
<p>Если вы пользуйтесь <strong>Intellij IDEA</strong> &#8212; <span class="text-neon">Alt+Insert</span> вам в помощь.</p>

<hr>
<h3>Арканоид(6)</h3>
<p>У нас будут &#171;<em><strong>кирпичи</strong></em>&#171;, &#171;<em><strong>шарик</strong></em>&#187; и &#171;<em><strong>подставка</strong></em>&#187; и у них будет много общего.<br />
Они будут перемещаться по полю и отрисовываться.<br />
Значит у них у всех будут координаты и размер.<br />
А еще методы <mark>move()</mark> &#8212; для перемещения и <mark>draw()</mark> для отрисовки.</p>
<p>Есть интересное предложение: давай введем один базовый класс для все объектов.<br />
Пусть это будет класс <span class="text-corporate"><strong>BaseObject</strong></span>.<br />
А классы <span class="text-corporate"><strong>Ball</strong></span>, <span class="text-corporate"><strong>Stand</strong></span>, <span class="text-corporate"><strong>Brick</strong></span> от него наследуются.</p>
<p>Создай класс <span class="text-corporate"><strong>BaseObject</strong></span> и добавь его родителем к классам <span class="text-corporate"><strong>Ball</strong></span>, <span class="text-corporate"><strong>Stand</strong></span>, <span class="text-corporate"><strong>Brick</strong></span></p>
<p>Еще нам понадобится класс <span class="text-corporate"><strong>Canvas</strong></span><br />
Он будет ответственным за &#171;<em><strong>отрисовку</strong></em>&#187; объектов.<br />
С помощью его они будут отрисовывать себя.<br />
Вернее даже на нем, но детали я сообщу позднее.</p>
<p><strong>Создай и этот класс.</strong></p>

<hr>
<h3>Арканоид(5)</h3>
<p>Чего еще не хватает классу <span class="text-corporate"><strong>Arkanoid</strong></span>?<br />
Во-первых ему нужен метод <mark>run()</mark>, в котором будет описана основная логика программы.<br />
Еще нужен метод <mark>move()</mark> &#8212; который будет двигать на один шаг все объекты требующие движения.<br />
Создай методы <mark>run()</mark> и <mark>move()</mark>.</p>
<p>Еще нам понадобится <strong>НЕ</strong> приватная статическая переменная game типа <span class="text-corporate"><strong>Arkanoid</strong></span>, которая будет хранить ссылку на созданный экземпляр класса <span class="text-corporate"><strong>Arkanoid</strong></span>.</p>
<p><strong>Выглядеть это должно примерно так:</strong><br />
<span class="text-neon">static Arkanoid game;</span></p>

<hr>
<h3>Арканоид(4)</h3>
<p>Также классу <span class="text-corporate"><strong>Arkanoid</strong></span> нужно будет хранить ссылку на шарик (<span class="text-corporate"><strong>Ball</strong></span>), &#171;<em><strong>подставку</strong></em>&#187; <span class="text-corporate"><strong>Stand</strong></span> и список &#171;<em><strong>кирпичей</strong></em>&#171;.</p>
<p><strong>Надо:</strong><br />
а) создать в классе <span class="text-corporate"><strong>Arkanoid</strong></span> два private поля: <mark class="green">ball</mark> типа <span class="text-corporate"><strong>Ball</strong></span> и <mark class="user">stand</mark> типа <strong><span class="text-corporate">Stand</span></strong><br />
б) добавить private поле <mark class="user">bricks</mark> типа <span class="text-red"><strong>List</strong>&lt;Brick&gt;</span><br />
в) добавь для них публичные <strong>геттеры</strong> и <strong>сеттеры</strong></p>

<hr>
<h3>Арканоид(3)</h3>
<p>Пожалуй, пора добавить конструктор в класс <span class="text-corporate"><strong>Arkanoid</strong></span>.<br />
Конструктор должен принимать два параметра типа <span class="text-corporate">int</span> (<mark class="user">width</mark> и <mark class="user">height</mark>) и корректно устанавливать значения соответствующих полей класса.</p>

<hr>
<h3>Арканоид(2)</h3>
<p>Главному <strong>классу</strong> (<span class="text-corporate"><strong>Arkanoid</strong></span>) нужно будет хранить информацию о размерах поля, где будут происходить все действия.</p>
<p>Поэтому:<br />
а) добавь в класс <span class="text-corporate"><strong>Arkanoid</strong></span> два приватных поля <mark class="user">width</mark>(<strong>ширина</strong>) и <mark class="user">height</mark>(<strong>высота</strong>) типа <span class="text-corporate">int</span><br />
б) создай для них публичные <strong>геттеры</strong> и <strong>сеттеры</strong></p>

<hr>
<h3>Арканоид(1)</h3>
<p>Давай сегодня напишем игру <strong>Арканоид</strong>.</p>
<p>В оригинале это выглядит примерно так <em>http://www.youtube.com/watch?v=Th-Z6QQ5AOQ</em><br />
Для начала мы напишем <strong>упрощенную</strong> <strong>версию</strong> этой игры.<br />
У нас будут кубики, шарик и летающая &#171;<em><strong>подставка</strong></em>&#171;, которая не дает шарику упасть.</p>
<p>Поэтому нам понадобятся классы:<br />
а) <span class="text-corporate"><strong>Arkanoid</strong></span> &#8212; класс в котором происходят основные действия. Также в нем будет наша точка входа в программу, метод <mark>main</mark>.<br />
б) <span class="text-corporate"><strong>Ball</strong></span> &#8212; <strong>шарик</strong>.<br />
в) <strong><span class="text-corporate">Brick</span></strong> &#8212; &#171;<em><strong>кирпичи</strong></em>&#171;, которые мы сбиваем шариком.<br />
г) <span class="text-corporate"><strong>Stand</strong></span> &#8212; <strong>летающая</strong> <strong>подставка</strong>.</p>
<p>Создай их, и не забудь о методе <mark>public static void main (String[] <strong>args</strong>)</mark> в класе <span class="text-corporate"><strong>Arkanoid</strong></span>.</p>

</div>
